import {
  Comment, Commit, Entity, Sprint, Summary, User,
} from '../types/types';
import * as stories from '../types/stories';
import {
  sortData,
  filterByUser,
  filterData,
  filterCommitsBySprint,
  setWordEnding
} from './helpers';

function rankUsers(users: User[],
                   commits: Commit[],
                   comments: Comment[],
                   identifier: 'commits' | 'likes',
                   stopper?: number) {
  let text = '';
  let endings = ['', '–∞', '–æ–≤'];
  let map: { id: number, frequency: number }[] = [];

  switch (identifier) {
    case 'commits':
      map = users.map((user) => {
        return {
          id: user.id,
          frequency: filterByUser(commits, user.id).length,
        };
      });
      text = '';
      endings = ['', '', ''];
      break;
    case 'likes':
      map = users.map((user) => {
        const userComments = filterByUser(comments, user.id);
        const likes = userComments.map((comment: Comment) => {
          return comment.likes.length;
        });
        return {
          id: user.id,
          frequency: likes.reduce((a: number, b: number) => a + b, 0)
        };
      });
      text = ' –≥–æ–ª–æ—Å';
      break;
    //no-default
  }

  const ranked = map.sort((unit1, unit2) => {
    if (unit1.frequency !== unit2.frequency) {
      return unit2.frequency - unit1.frequency;
    } else {
      return unit1.id - unit2.id;
    }
  });
  let slice;

  if (stopper) {
    slice = ranked.slice(0, stopper);
  } else {
    slice = ranked;
  }

  return slice.map((unit) => {
    const { name, avatar } = users.filter((user) => unit.id === user.id)[0];
    const userText = unit.frequency + text + setWordEnding(unit.frequency, endings);
    return {
      id: unit.id,
      name,
      avatar,
      valueText: userText
    };
  });
}

function prepareChart(commits: Commit[], sprints: Sprint[], activeId: number) {
  const sortedSprints = sprints.sort((sprint1, sprint2) => {
    return sprint1.id - sprint2.id;
  });

  return sortedSprints.map((sprint) => {
    const sprintInfo: { title: string, hint: string, value: number, active?: boolean } = {
      title: sprint.id.toString(10),
      hint: sprint.name,
      value: filterCommitsBySprint(commits, sprint).length
    }

    if (sprint.id === activeId) { sprintInfo.active = true }

    return sprintInfo;
  });
}

function getBreakdown(commits: Commit[], summaries: Summary[], limits: Array<number>) {
  const values = [0];

  // —É –Ω–∞—Å 4 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–æ –Ω–∏—á—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  for (let i = 0; i < limits.length; i++) {
    values.push(0);
  }

  commits.forEach(commit => {
    let size = 0;
    commit.summaries.forEach((summary) => {
      if (typeof summary === 'object') {
        size += summary.added;
        size += summary.removed;
      } else {
        const summaryObj = summaries.filter(unit => unit.id === summary)[0];
        size += summaryObj.added;
        size += summaryObj.removed;
      }
    });

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥ –∫–∞–∫–æ–π –∏–∑ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ø–∞–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–∞; –µ—Å–ª–∏ –±–æ–ª—å—à–µ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
    for (let i = 0; i <= limits.length; i++) {
      if (limits[i] && size <= limits[i]) {
        values[i]++;
        break;
      } else if (!limits[i]) {
        values[values.length - 1]++;
      }
    }
  });

  return values;
}

function prepareDiagram(currentCommits: Commit[], prevCommits: Commit[], summaries: Summary[]) {
  const currentValue = currentCommits.length;
  const differenceSign = currentValue > prevCommits.length ? '+' : '-';
  let differenceText: string;

  if (currentValue !== prevCommits.length) {
    differenceText = `${differenceSign}${Math.abs(currentValue - prevCommits.length)} —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞`;
  } else {
    differenceText = '–∫–∞–∫ –∏ –≤ –ø—Ä–æ—à–ª–æ–º —Å–ø—Ä–∏–Ω—Ç–µ';
  }

  const limits = [100, 500, 1000];
  const currentValues = getBreakdown(currentCommits, summaries, limits);
  const prevValues = getBreakdown(prevCommits, summaries, limits);
  const categories = [];

  for (let i = 0; i <= limits.length; i++) {
    const lower = limits[i - 1] ? limits[i - 1] + 1 : 1;
    const higher = limits[i] ? limits[i] : null;
    let title = '';
    let diffText = '';
    const value = currentValues[i];
    const prevValue = prevValues[i];
    const diffSign = value > prevValue ? '+' : '-';

    // –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–∞–µ–≤–æ–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤ —Ç–µ–∫—É—â–µ–º –∏ –ø—Ä–æ—à–ª–æ–º, —Ç–æ–≥–¥–∞ —Å—Ç–∞–≤–ª—é '=='
    if (currentValue !== prevValue) {
      diffText = `${diffSign}${Math.abs(value - prevValue)}`;
    } else {
      diffText = '==';
    }

    if (higher) {
      title = `${lower} ‚Äî ${higher} —Å—Ç—Ä–æ–∫${setWordEnding(higher, ['–∞', '–∏', ''])}`;
    } else {
      title = `> ${lower} —Å—Ç—Ä–æ–∫${setWordEnding(lower, ['–∞', '–∏', ''])}`;
    }

    //–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Ä–æ–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, –Ω–æ —É –Ω–∞—Å –∂–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π?
    categories.unshift({
      title,
      valueText: `${value} –∫–æ–º–º–∏—Ç${setWordEnding(value, ['', '–∞', '–æ–≤'])}`,
      differenceText: diffText
    });
  }

  return {
    totalText: `${currentValue} –∫–æ–º–º–∏—Ç${setWordEnding(currentValue, ['', '–∞', '–æ–≤'])}`,
    differenceText,
    categories
  };
}

function prepareActivity(commits: Commit[]) {
  const dayNames = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
  const heatmap = {
    sun: [],
    mon: [],
    tue: [],
    wed: [],
    thu: [],
    fri: [],
    sat: []
  };

  for (let key in heatmap) {
    for (let i = 0; i < 24; i++) { // @ts-ignore
      heatmap[key].push(0) }
  }

  commits.forEach(commit => {
    const datetime = new Date(commit.timestamp);
    const dayName = dayNames[datetime.getDay()];
    // @ts-ignore
    heatmap[dayName][datetime.getHours()]++;
  });

  return heatmap;
}


export default function prepareData(entities: Entity[], identifier: { sprintId: number }): stories.StoryData {
  //—Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–∫–∏–¥—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ —Ç–∏–ø–∞–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø–æ –≤—Å–µ–º—É –º–∞—Å—Å–∏–≤—É
  const sorted = sortData(entities);
  //–ø–æ—Ç–æ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ, —á—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ø—Ä–∏–Ω—Ç—É (–∑–∞–æ–¥–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç)
  const filtered = filterData(sorted, identifier.sprintId);
  const prevSprint = sorted.sprints.filter(sprint => sprint.id === identifier.sprintId - 1)[0];
  const currentRank = rankUsers(sorted.users, filtered.commits, filtered.comments, 'commits');

  return [
    {
      alias: 'leaders',
      data: {
        title: '–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤',
        subtitle: filtered.sprint.name,
        emoji: 'üëë',
        users: currentRank
      }
    },
    {
      alias: 'vote',
      data: {
        title: '–°–∞–º—ã–π üîé –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
        subtitle: filtered.sprint.name,
        emoji: 'üîé',
        users: rankUsers(sorted.users, filtered.commits, filtered.comments, 'likes')
      }
    },
    {
      alias: 'chart',
      data: {
        title: '–ö–æ–º–º–∏—Ç—ã',
        subtitle: filtered.sprint.name,
        values: prepareChart(sorted.commits, sorted.sprints, filtered.sprint.id),
        users: currentRank
      }
    },
    {
      alias: 'diagram',
      data: {
        title: '–†–∞–∑–º–µ—Ä –∫–æ–º–º–∏—Ç–æ–≤',
        subtitle: filtered.sprint.name,
        ...prepareDiagram(
          filtered.commits,
          filterCommitsBySprint(sorted.commits, prevSprint),
          sorted.summaries
        )
      }
    },
    {
      alias: 'activity',
      data: {
        title: '–ö–æ–º–º–∏—Ç—ã, 1 –Ω–µ–¥–µ–ª—è',
        subtitle: filtered.sprint.name,
        data: prepareActivity(filtered.commits)
      }
    }
  ];
}
